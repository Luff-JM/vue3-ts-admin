import path from 'path'
import { PluginOption } from 'vite'
import fs from 'fs'
import postcss from 'postcss'
import postcssScss from 'postcss-scss'

const root = process.cwd()
const colorVariablesPath = path.join(root, 'src/design/variables/colors.scss')

const parseFile = () => {
  const map = new Map<string, string>()
  const content = fs.readFileSync(colorVariablesPath, 'utf-8')
  const result = postcss().process(content, { syntax: postcssScss }).sync()
  result.root.nodes.forEach((node) => {
    if (node.type === 'decl') {
      map.set(node.prop, node.value)
    }
  })
  return map
}

const generateTailwindExtendColors = (map: Map<string, string>) => {
  const target = path.join(
    root,
    'src/design/variables/tailwindExtendColors.g.ts'
  )
  let output = ''

  map.forEach((value, key) => {
    const item = ` '${key.replace('$', '')}': '${value}',\n`
    output += item
  })
  output = `/* Generated by color-variables-plugin */\nexport default {\n${output}}`

  fs.writeFileSync(target, output)
}

const generateColorEnum = (map: Map<string, string>) => {
  const target = path.join(root, 'src/enums/colorEnum.g.ts')
  let output = ''

  map.forEach((value, key) => {
    const item = ` ${key
      .replace('$', '')
      .toUpperCase()
      .replace(/-/g, '_')} = '${value}',\n`
    output += item
  })
  output = `/* Generated by color-variables-plugin */\nexport enum ColorEnum {\n${output}}`

  fs.writeFileSync(target, output)
}

export default function colorVariables(): PluginOption {
  return {
    name: 'color-variables-plugin',
    transform(code, id, options) {
      if (id === colorVariablesPath) {
        const map = parseFile()
        generateTailwindExtendColors(map)
        generateColorEnum(map)
      }
    }
  }
}
